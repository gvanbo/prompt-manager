(()=>{var t={12:(t,e,n)=>{const o=n(398),r=n(896),a=n(928);class i{constructor(t){this.context=t,this.promptHistory=[],this.loadHistory(),this.registerCommands()}registerCommands(){const t=o.commands.registerCommand("promptManager.createPrompt",()=>{this.showPromptCreator()}),e=o.commands.registerCommand("promptManager.viewHistory",()=>{this.showPromptHistory()}),n=o.commands.registerCommand("promptManager.ratePrompt",()=>{this.showRatingInterface()}),r=o.commands.registerCommand("promptManager.optimizePrompt",()=>{this.showOptimizationSuggestions()});this.context.subscriptions.push(t,e,n,r)}async showPromptCreator(){const t=o.window.createWebviewPanel("promptCreator","Prompt Creator",o.ViewColumn.One,{enableScripts:!0});t.webview.html=this.getPromptCreatorHTML(),t.webview.onDidReceiveMessage(async e=>{switch(e.command){case"createPrompt":await this.createStructuredPrompt(e.data);break;case"getContext":const n=await this.getProjectContext();t.webview.postMessage({command:"contextLoaded",data:n})}})}async getProjectContext(){const t=o.workspace.workspaceFolders?.[0];return t?{projectName:a.basename(t.uri.fsPath),hasPackageJson:r.existsSync(a.join(t.uri.fsPath,"package.json")),hasMoodleConfig:r.existsSync(a.join(t.uri.fsPath,"version.php")),hasClaudeConfig:r.existsSync(a.join(t.uri.fsPath,".claude")),hasCopilotConfig:r.existsSync(a.join(t.uri.fsPath,"copilot.yml")),gitBranch:await this.getCurrentGitBranch(),openFiles:o.workspace.textDocuments.map(t=>({fileName:a.basename(t.fileName),language:t.languageId}))}:{}}async getCurrentGitBranch(){try{const{exec:t}=n(317);return new Promise(e=>{t("git branch --show-current",{cwd:o.workspace.workspaceFolders?.[0]?.uri.fsPath},(t,n)=>{e(t?"main":n.trim())})})}catch{return"main"}}async createStructuredPrompt(t){const e=(new Date).toISOString(),n=o.workspace.workspaceFolders?.[0],r={id:Date.now().toString(),timestamp:e,context:t.context,goal:t.goal,currentState:t.currentState,constraints:t.constraints,expectedOutput:t.expectedOutput,modelSuggestion:this.suggestModel(t),fullPrompt:this.formatPrompt(t),projectPath:n?.uri.fsPath||"",rating:null,notes:""};this.promptHistory.push(r),this.saveHistory(),await o.env.clipboard.writeText(r.fullPrompt),o.window.showInformationMessage(`Prompt created and copied to clipboard! Suggested model: ${r.modelSuggestion}`,"View History","Rate Later").then(t=>{"View History"===t&&this.showPromptHistory()})}suggestModel(t){const e=t.context.toLowerCase(),n=t.goal.toLowerCase();return n.includes("architecture")||n.includes("refactor")||n.includes("debug")||e.includes("client")||n.includes("production")||e.includes("moodle")&&(n.includes("complex")||n.includes("integration"))?"Claude Sonnet 4":n.includes("autocomplete")||n.includes("boilerplate")||n.includes("simple")?"GitHub Copilot":n.includes("experimental")||n.includes("quick")||n.includes("lookup")?"Gemini 2.5 Flash":"Claude Sonnet 4"}formatPrompt(t){const e=this.optimizePromptContent(t);return`Context: ${e.context}\n\nGoal: ${e.goal}\n\nCurrent State: ${e.currentState}\n\nConstraints: ${e.constraints}\n\nExpected Output: ${e.expectedOutput}`}optimizePromptContent(t){return{context:this.enhanceContext(t.context),goal:this.enhanceGoal(t.goal),currentState:this.enhanceCurrentState(t.currentState),constraints:this.enhanceConstraints(t.constraints),expectedOutput:this.enhanceExpectedOutput(t.expectedOutput)}}enhanceContext(t){if(!t)return t;let e=t;if(!e.toLowerCase().includes("moodle")&&!e.toLowerCase().includes("react")){const t=this.getWorkspaceTypeHint();t&&(e=`${t}: ${e}`)}return e.length<30&&(e+=" (Consider adding: version, environment, specific component)"),e}enhanceGoal(t){if(!t)return t;let e=t;return e.toLowerCase().includes("fix")&&!e.toLowerCase().includes("how")&&(e=`Identify root cause and provide solution to ${e.toLowerCase()}`),e.toLowerCase().includes("create")&&e.length<50&&(e+=" with step-by-step implementation details"),e.toLowerCase().includes("success")||e.toLowerCase().includes("criteria")||(e+=". Include clear success criteria for completion"),e}enhanceCurrentState(t){if(!t)return t;let e=t;return e.length<40&&(e+="\n\n[Consider adding: relevant code snippets, error messages, current behavior vs expected behavior]"),(e.toLowerCase().includes("file")||e.toLowerCase().includes("structure"))&&(e+="\n[Tip: Include file tree or relevant file paths]"),e}enhanceConstraints(t){if(!t)return"Follow best practices and maintain code quality";let e=t;const n=[];if(!e.toLowerCase().includes("standard")){const t=this.getWorkspaceTypeHint();"Moodle"===t?n.push("Follow Moodle coding standards"):"React"===t&&n.push("Use React best practices and accessibility standards")}return e.toLowerCase().includes("backward")||e.toLowerCase().includes("breaking")||n.push("No breaking changes to existing functionality"),e.toLowerCase().includes("performance")||n.push("Consider performance implications"),n.length>0&&(e+=(e?". ":"")+n.join(". ")),e}enhanceExpectedOutput(t){if(!t)return"Complete solution with code examples and implementation steps";let e=t;return e.length<30&&(e+=". Include: code examples, step-by-step instructions, and explanation of approach"),e.toLowerCase().includes("test")||e.toLowerCase().includes("verify")||(e+=". Suggest how to test/verify the solution"),(e.toLowerCase().includes("architecture")||e.toLowerCase().includes("refactor"))&&(e+=". Include documentation for future maintenance"),e}getWorkspaceTypeHint(){const t=o.workspace.workspaceFolders?.[0];if(!t)return null;const e=t.uri.fsPath;return r.existsSync(a.join(e,"version.php"))?"Moodle":r.existsSync(a.join(e,"package.json"))?"React/Node.js":null}showPromptHistory(){const t=o.window.createWebviewPanel("promptHistory","Prompt History & Analytics",o.ViewColumn.One,{enableScripts:!0});t.webview.html=this.getHistoryHTML(),t.webview.onDidReceiveMessage(e=>{switch(e.command){case"ratePrompt":this.ratePrompt(e.promptId,e.rating);break;case"deletePrompt":this.deletePrompt(e.promptId),t.webview.html=this.getHistoryHTML()}})}async showRatingInterface(){if(0===this.promptHistory.length)return void o.window.showWarningMessage("No prompts to rate");const t=this.promptHistory.filter(t=>!t.rating);if(0===t.length)return void o.window.showInformationMessage("All prompts are already rated");const e=t[t.length-1],n=e.goal.substring(0,50)+(e.goal.length>50?"...":""),r=await o.window.showInputBox({prompt:`Rate Efficiency (1-5) for: "${n}"`,validateInput:t=>{const e=parseInt(t);return e>=1&&e<=5?null:"Please enter 1-5"}});if(!r)return;const a=await o.window.showInputBox({prompt:"Rate Accuracy (1-5)",validateInput:t=>{const e=parseInt(t);return e>=1&&e<=5?null:"Please enter 1-5"}});if(!a)return;const i=await o.window.showInputBox({prompt:"Rate Satisfaction (1-5)",validateInput:t=>{const e=parseInt(t);return e>=1&&e<=5?null:"Please enter 1-5"}});if(!i)return;const s=await o.window.showInputBox({prompt:"Additional notes (optional)",placeHolder:"What worked well or could be improved?"});this.ratePrompt(e.id,{efficiency:parseInt(r),accuracy:parseInt(a),satisfaction:parseInt(i),notes:s||""})}ratePrompt(t,e){const n=this.promptHistory.find(e=>e.id===t);n&&(n.rating=e,n.notes=e.notes,this.saveHistory(),o.window.showInformationMessage("Prompt rating saved!"))}deletePrompt(t){this.promptHistory=this.promptHistory.filter(e=>e.id!==t),this.saveHistory()}showOptimizationSuggestions(){const t=this.getAnalytics(),e=this.generateOptimizationSuggestions(t);o.window.showInformationMessage(e,{modal:!0})}getAnalytics(){const t=this.promptHistory.filter(t=>t.rating);return{totalPrompts:this.promptHistory.length,ratedPrompts:t.length,avgEfficiency:this.calculateAverage(t,"efficiency"),avgAccuracy:this.calculateAverage(t,"accuracy"),avgSatisfaction:this.calculateAverage(t,"satisfaction"),modelUsage:this.getModelUsageStats(),topPerformingPrompts:t.sort((t,e)=>(e.rating.efficiency+e.rating.accuracy+e.rating.satisfaction)/3-(t.rating.efficiency+t.rating.accuracy+t.rating.satisfaction)/3).slice(0,5)}}calculateAverage(t,e){return 0===t.length?0:t.reduce((t,n)=>t+(n.rating[e]||0),0)/t.length}getModelUsageStats(){const t={};return this.promptHistory.forEach(e=>{t[e.modelSuggestion]=(t[e.modelSuggestion]||0)+1}),t}generateOptimizationSuggestions(t){let e="Optimization Suggestions:\n\n";return t.avgEfficiency<3&&(e+="• Consider using more specific context and constraints\n"),t.avgAccuracy<3&&(e+="• Include more detailed current state information\n"),t.avgSatisfaction<3&&(e+="• Be more explicit about expected output format\n"),t.ratedPrompts<.5*t.totalPrompts&&(e+="• Rate more prompts to get better optimization insights\n"),e}loadHistory(){try{const t=a.join(this.context.globalStorageUri.fsPath,"prompt-history.json");r.existsSync(t)&&(this.promptHistory=JSON.parse(r.readFileSync(t,"utf8")))}catch(t){console.error("Failed to load prompt history:",t)}}saveHistory(){try{const t=a.join(this.context.globalStorageUri.fsPath,"prompt-history.json");r.mkdirSync(a.dirname(t),{recursive:!0}),r.writeFileSync(t,JSON.stringify(this.promptHistory,null,2))}catch(t){console.error("Failed to save prompt history:",t)}}getPromptCreatorHTML(){return'<!DOCTYPE html>\n        <html>\n        <head>\n            <style>\n                body { font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; padding: 20px; background: var(--vscode-editor-background); color: var(--vscode-editor-foreground); }\n                .form-group { margin-bottom: 15px; }\n                label { display: block; margin-bottom: 5px; font-weight: bold; color: var(--vscode-editor-foreground); }\n                input, textarea, select { \n                    width: 100%; \n                    padding: 8px; \n                    border: 1px solid var(--vscode-input-border); \n                    border-radius: 4px; \n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    font-family: inherit;\n                }\n                textarea { min-height: 80px; resize: vertical; }\n                button { \n                    background: var(--vscode-button-background); \n                    color: var(--vscode-button-foreground); \n                    padding: 10px 20px; \n                    border: none; \n                    border-radius: 4px; \n                    cursor: pointer; \n                    font-family: inherit;\n                }\n                button:hover { background: var(--vscode-button-hoverBackground); }\n                .context-info { \n                    background: var(--vscode-textBlockQuote-background); \n                    border: 1px solid var(--vscode-textBlockQuote-border);\n                    padding: 10px; \n                    border-radius: 4px; \n                    margin-bottom: 15px;\n                    font-size: 0.9em;\n                    min-height: 20px;\n                }\n                .context-info.loading { \n                    opacity: 0.7; \n                    font-style: italic; \n                }\n                .model-suggestion { \n                    background: var(--vscode-editorInfo-background); \n                    border: 1px solid var(--vscode-editorInfo-border);\n                    padding: 10px; \n                    border-radius: 4px; \n                    margin-top: 10px; \n                }\n                h2 { color: var(--vscode-editor-foreground); margin-top: 0; }\n            </style>\n        </head>\n        <body>\n            <h2>Create Structured Prompt</h2>\n            <div class="context-info loading" id="contextInfo">Loading project context...</div>\n            \n            <form id="promptForm">\n                <div class="form-group">\n                    <label for="context">Context:</label>\n                    <textarea id="context" placeholder="Brief project context, current working area, relevant technologies"></textarea>\n                </div>\n                \n                <div class="form-group">\n                    <label for="goal">Goal:</label>\n                    <textarea id="goal" placeholder="What you want to achieve - be specific"></textarea>\n                </div>\n                \n                <div class="form-group">\n                    <label for="currentState">Current State:</label>\n                    <textarea id="currentState" placeholder="Relevant code/files, error messages, current behavior"></textarea>\n                </div>\n                \n                <div class="form-group">\n                    <label for="constraints">Constraints:</label>\n                    <textarea id="constraints" placeholder="Requirements, limitations, standards to follow"></textarea>\n                </div>\n                \n                <div class="form-group">\n                    <label for="expectedOutput">Expected Output:</label>\n                    <textarea id="expectedOutput" placeholder="Specific deliverable format, success criteria"></textarea>\n                </div>\n                \n                <button type="submit">Create Prompt</button>\n            </form>\n            \n            <div class="model-suggestion" id="modelSuggestion" style="display: none;"></div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                // Load context on page load\n                window.addEventListener(\'load\', () => {\n                    vscode.postMessage({ command: \'getContext\' });\n                });\n                \n                window.addEventListener(\'message\', event => {\n                    const message = event.data;\n                    if (message.command === \'contextLoaded\') {\n                        displayContext(message.data);\n                    }\n                });\n                \n                function displayContext(context) {\n                    const info = document.getElementById(\'contextInfo\');\n                    info.classList.remove(\'loading\');\n                    \n                    if (!context.projectName) {\n                        info.innerHTML = \'<strong>No workspace detected</strong> - Open a project folder for enhanced context\';\n                        return;\n                    }\n                    \n                    let html = \'<strong>📁 Project Context:</strong><br>\';\n                    html += `<strong>Project:</strong> ${context.projectName}<br>`;\n                    html += `<strong>Branch:</strong> ${context.gitBranch}<br>`;\n                    html += `<strong>Type:</strong> ${getProjectType(context)}<br>`;\n                    \n                    if (context.openFiles && context.openFiles.length > 0) {\n                        const fileList = context.openFiles.slice(0, 3).map(f => f.fileName).join(\', \');\n                        const remaining = context.openFiles.length > 3 ? ` (+${context.openFiles.length - 3} more)` : \'\';\n                        html += `<strong>Open Files:</strong> ${fileList}${remaining}`;\n                    } else {\n                        html += \'<strong>Open Files:</strong> None\';\n                    }\n                    \n                    info.innerHTML = html;\n                }\n                \n                function getProjectType(context) {\n                    if (context.hasMoodleConfig) return \'🎓 Moodle Plugin\';\n                    if (context.hasPackageJson) return \'⚛️ Node.js/React\';\n                    if (context.hasClaudeConfig) return \'🤖 AI-Enhanced Project\';\n                    return \'📂 General Project\';\n                }\n                \n                document.getElementById(\'promptForm\').addEventListener(\'submit\', (e) => {\n                    e.preventDefault();\n                    \n                    const data = {\n                        context: document.getElementById(\'context\').value,\n                        goal: document.getElementById(\'goal\').value,\n                        currentState: document.getElementById(\'currentState\').value,\n                        constraints: document.getElementById(\'constraints\').value,\n                        expectedOutput: document.getElementById(\'expectedOutput\').value\n                    };\n                    \n                    vscode.postMessage({ command: \'createPrompt\', data });\n                });\n            <\/script>\n        </body>\n        </html>'}getHistoryHTML(){const t=this.getAnalytics();return`<!DOCTYPE html>\n        <html>\n        <head>\n            <style>\n                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; padding: 20px; }\n                .analytics { background: #f5f5f5; padding: 15px; border-radius: 4px; margin-bottom: 20px; }\n                .prompt-item { border: 1px solid #ddd; border-radius: 4px; padding: 15px; margin-bottom: 10px; }\n                .prompt-header { font-weight: bold; margin-bottom: 10px; }\n                .rating { margin-top: 10px; }\n                .rating button { margin-right: 5px; padding: 5px 10px; }\n                .rating.rated { background: #e8f4fd; }\n                button { background: #007ACC; color: white; padding: 5px 10px; border: none; border-radius: 3px; cursor: pointer; }\n                button.delete { background: #d32f2f; }\n                .model-tag { background: #007ACC; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }\n            </style>\n        </head>\n        <body>\n            <h2>Prompt History & Analytics</h2>\n            \n            <div class="analytics">\n                <h3>Analytics</h3>\n                <p><strong>Total Prompts:</strong> ${t.totalPrompts}</p>\n                <p><strong>Rated:</strong> ${t.ratedPrompts}/${t.totalPrompts}</p>\n                <p><strong>Avg Efficiency:</strong> ${t.avgEfficiency.toFixed(1)}/5</p>\n                <p><strong>Avg Accuracy:</strong> ${t.avgAccuracy.toFixed(1)}/5</p>\n                <p><strong>Avg Satisfaction:</strong> ${t.avgSatisfaction.toFixed(1)}/5</p>\n            </div>\n            \n            <div class="prompts">\n                ${this.promptHistory.map(t=>`\n                    <div class="prompt-item">\n                        <div class="prompt-header">\n                            ${new Date(t.timestamp).toLocaleString()}\n                            <span class="model-tag">${t.modelSuggestion}</span>\n                        </div>\n                        <p><strong>Goal:</strong> ${t.goal}</p>\n                        <p><strong>Context:</strong> ${t.context}</p>\n                        \n                        <div class="rating ${t.rating?"rated":""}">\n                            ${t.rating?`<p>Efficiency: ${t.rating.efficiency}/5, Accuracy: ${t.rating.accuracy}/5, Satisfaction: ${t.rating.satisfaction}/5</p>`:`<button onclick="ratePrompt('${t.id}')">Rate Prompt</button>`}\n                            <button class="delete" onclick="deletePrompt('${t.id}')">Delete</button>\n                        </div>\n                    </div>\n                `).join("")}\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                function ratePrompt(promptId) {\n                    const efficiency = prompt('Rate Efficiency (1-5):');\n                    const accuracy = prompt('Rate Accuracy (1-5):');\n                    const satisfaction = prompt('Rate Satisfaction (1-5):');\n                    const notes = prompt('Additional notes (optional):') || '';\n                    \n                    if (efficiency && accuracy && satisfaction) {\n                        vscode.postMessage({\n                            command: 'ratePrompt',\n                            promptId,\n                            rating: {\n                                efficiency: parseInt(efficiency),\n                                accuracy: parseInt(accuracy),\n                                satisfaction: parseInt(satisfaction),\n                                notes\n                            }\n                        });\n                        location.reload();\n                    }\n                }\n                \n                function deletePrompt(promptId) {\n                    if (confirm('Delete this prompt?')) {\n                        vscode.postMessage({ command: 'deletePrompt', promptId });\n                    }\n                }\n            <\/script>\n        </body>\n        </html>`}}t.exports={activate:function(t){new i(t)},deactivate:function(){}}},317:t=>{"use strict";t.exports=require("child_process")},398:t=>{"use strict";t.exports=require("vscode")},896:t=>{"use strict";t.exports=require("fs")},928:t=>{"use strict";t.exports=require("path")}},e={},n=function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,n),a.exports}(12);module.exports=n})();