{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://prompt-manager/./extension.js","webpack://prompt-manager/external node-commonjs \"child_process\"","webpack://prompt-manager/external commonjs \"vscode\"","webpack://prompt-manager/external node-commonjs \"fs\"","webpack://prompt-manager/external node-commonjs \"path\"","webpack://prompt-manager/webpack/bootstrap","webpack://prompt-manager/webpack/startup"],"sourcesContent":["// extension.js - Complete VS Code Prompt Manager Extension\nconst vscode = require(\"vscode\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nclass PromptManager {\n  constructor(context) {\n    this.context = context;\n    this.promptHistory = [];\n    this.loadHistory();\n    this.registerCommands();\n  }\n\n  registerCommands() {\n    // Register commands\n    const createPrompt = vscode.commands.registerCommand(\n      \"promptManager.createPrompt\",\n      () => {\n        this.showPromptCreator();\n      }\n    );\n\n    const viewHistory = vscode.commands.registerCommand(\n      \"promptManager.viewHistory\",\n      () => {\n        this.showPromptHistory();\n      }\n    );\n\n    const ratePrompt = vscode.commands.registerCommand(\n      \"promptManager.ratePrompt\",\n      () => {\n        this.showRatingInterface();\n      }\n    );\n\n    const optimizePrompt = vscode.commands.registerCommand(\n      \"promptManager.optimizePrompt\",\n      () => {\n        this.showOptimizationSuggestions();\n      }\n    );\n\n    this.context.subscriptions.push(\n      createPrompt,\n      viewHistory,\n      ratePrompt,\n      optimizePrompt\n    );\n  }\n\n  async showPromptCreator() {\n    const panel = vscode.window.createWebviewPanel(\n      \"promptCreator\",\n      \"Prompt Creator\",\n      vscode.ViewColumn.One,\n      { enableScripts: true }\n    );\n\n    panel.webview.html = this.getPromptCreatorHTML();\n\n    panel.webview.onDidReceiveMessage(async (message) => {\n      switch (message.command) {\n        case \"createPrompt\":\n          await this.createStructuredPrompt(message.data);\n          break;\n        case \"getContext\":\n          const context = await this.getProjectContext();\n          panel.webview.postMessage({\n            command: \"contextLoaded\",\n            data: context,\n          });\n          break;\n      }\n    });\n  }\n\n  async getProjectContext() {\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n    if (!workspaceFolder) return {};\n\n    const context = {\n      projectName: path.basename(workspaceFolder.uri.fsPath),\n      hasPackageJson: fs.existsSync(\n        path.join(workspaceFolder.uri.fsPath, \"package.json\")\n      ),\n      hasMoodleConfig: fs.existsSync(\n        path.join(workspaceFolder.uri.fsPath, \"version.php\")\n      ),\n      hasClaudeConfig: fs.existsSync(\n        path.join(workspaceFolder.uri.fsPath, \".claude\")\n      ),\n      hasCopilotConfig: fs.existsSync(\n        path.join(workspaceFolder.uri.fsPath, \"copilot.yml\")\n      ),\n      gitBranch: await this.getCurrentGitBranch(),\n      openFiles: vscode.workspace.textDocuments.map((doc) => ({\n        fileName: path.basename(doc.fileName),\n        language: doc.languageId,\n      })),\n    };\n\n    return context;\n  }\n\n  async getCurrentGitBranch() {\n    try {\n      const { exec } = require(\"child_process\");\n      return new Promise((resolve) => {\n        exec(\n          \"git branch --show-current\",\n          { cwd: vscode.workspace.workspaceFolders?.[0]?.uri.fsPath },\n          (error, stdout) => {\n            resolve(error ? \"main\" : stdout.trim());\n          }\n        );\n      });\n    } catch {\n      return \"main\";\n    }\n  }\n\n  async createStructuredPrompt(data) {\n    const timestamp = new Date().toISOString();\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n\n    const prompt = {\n      id: Date.now().toString(),\n      timestamp,\n      context: data.context,\n      goal: data.goal,\n      currentState: data.currentState,\n      constraints: data.constraints,\n      expectedOutput: data.expectedOutput,\n      modelSuggestion: this.suggestModel(data),\n      fullPrompt: this.formatPrompt(data),\n      projectPath: workspaceFolder?.uri.fsPath || \"\",\n      rating: null,\n      notes: \"\",\n    };\n\n    this.promptHistory.push(prompt);\n    this.saveHistory();\n\n    // Copy to clipboard\n    await vscode.env.clipboard.writeText(prompt.fullPrompt);\n\n    vscode.window\n      .showInformationMessage(\n        `Prompt created and copied to clipboard! Suggested model: ${prompt.modelSuggestion}`,\n        \"View History\",\n        \"Rate Later\"\n      )\n      .then((selection) => {\n        if (selection === \"View History\") {\n          this.showPromptHistory();\n        }\n      });\n  }\n\n  suggestModel(data) {\n    const context = data.context.toLowerCase();\n    const goal = data.goal.toLowerCase();\n\n    // Complex tasks\n    if (\n      goal.includes(\"architecture\") ||\n      goal.includes(\"refactor\") ||\n      goal.includes(\"debug\")\n    ) {\n      return \"Claude Sonnet 4\";\n    }\n\n    // Client work\n    if (context.includes(\"client\") || goal.includes(\"production\")) {\n      return \"Claude Sonnet 4\";\n    }\n\n    // Moodle specific\n    if (\n      context.includes(\"moodle\") &&\n      (goal.includes(\"complex\") || goal.includes(\"integration\"))\n    ) {\n      return \"Claude Sonnet 4\";\n    }\n\n    // Simple tasks\n    if (\n      goal.includes(\"autocomplete\") ||\n      goal.includes(\"boilerplate\") ||\n      goal.includes(\"simple\")\n    ) {\n      return \"GitHub Copilot\";\n    }\n\n    // Experimental or quick tasks\n    if (\n      goal.includes(\"experimental\") ||\n      goal.includes(\"quick\") ||\n      goal.includes(\"lookup\")\n    ) {\n      return \"Gemini 2.5 Flash\";\n    }\n\n    return \"Claude Sonnet 4\"; // Default to premium for quality\n  }\n\n  formatPrompt(data) {\n    const optimized = this.optimizePromptContent(data);\n    return `Context: ${optimized.context}\n\nGoal: ${optimized.goal}\n\nCurrent State: ${optimized.currentState}\n\nConstraints: ${optimized.constraints}\n\nExpected Output: ${optimized.expectedOutput}`;\n  }\n\n  optimizePromptContent(data) {\n    return {\n      context: this.enhanceContext(data.context),\n      goal: this.enhanceGoal(data.goal),\n      currentState: this.enhanceCurrentState(data.currentState),\n      constraints: this.enhanceConstraints(data.constraints),\n      expectedOutput: this.enhanceExpectedOutput(data.expectedOutput),\n    };\n  }\n\n  enhanceContext(context) {\n    if (!context) return context;\n\n    // Add specificity cues\n    let enhanced = context;\n\n    // Add project type context if missing\n    if (\n      !enhanced.toLowerCase().includes(\"moodle\") &&\n      !enhanced.toLowerCase().includes(\"react\")\n    ) {\n      const workspaceContext = this.getWorkspaceTypeHint();\n      if (workspaceContext) {\n        enhanced = `${workspaceContext}: ${enhanced}`;\n      }\n    }\n\n    // Suggest adding version/environment info if vague\n    if (enhanced.length < 30) {\n      enhanced +=\n        \" (Consider adding: version, environment, specific component)\";\n    }\n\n    return enhanced;\n  }\n\n  enhanceGoal(goal) {\n    if (!goal) return goal;\n\n    let enhanced = goal;\n\n    // Make goals more specific\n    if (\n      enhanced.toLowerCase().includes(\"fix\") &&\n      !enhanced.toLowerCase().includes(\"how\")\n    ) {\n      enhanced = `Identify root cause and provide solution to ${enhanced.toLowerCase()}`;\n    }\n\n    if (enhanced.toLowerCase().includes(\"create\") && enhanced.length < 50) {\n      enhanced += \" with step-by-step implementation details\";\n    }\n\n    // Add success criteria prompt\n    if (\n      !enhanced.toLowerCase().includes(\"success\") &&\n      !enhanced.toLowerCase().includes(\"criteria\")\n    ) {\n      enhanced += \". Include clear success criteria for completion\";\n    }\n\n    return enhanced;\n  }\n\n  enhanceCurrentState(currentState) {\n    if (!currentState) return currentState;\n\n    let enhanced = currentState;\n\n    // Prompt for code/error details if missing\n    if (enhanced.length < 40) {\n      enhanced +=\n        \"\\n\\n[Consider adding: relevant code snippets, error messages, current behavior vs expected behavior]\";\n    }\n\n    // Suggest file structure if architectural\n    if (\n      enhanced.toLowerCase().includes(\"file\") ||\n      enhanced.toLowerCase().includes(\"structure\")\n    ) {\n      enhanced += \"\\n[Tip: Include file tree or relevant file paths]\";\n    }\n\n    return enhanced;\n  }\n\n  enhanceConstraints(constraints) {\n    if (!constraints) return \"Follow best practices and maintain code quality\";\n\n    let enhanced = constraints;\n\n    // Add standard constraints if missing\n    const commonConstraints = [];\n\n    if (!enhanced.toLowerCase().includes(\"standard\")) {\n      const projectType = this.getWorkspaceTypeHint();\n      if (projectType === \"Moodle\") {\n        commonConstraints.push(\"Follow Moodle coding standards\");\n      } else if (projectType === \"React\") {\n        commonConstraints.push(\n          \"Use React best practices and accessibility standards\"\n        );\n      }\n    }\n\n    if (\n      !enhanced.toLowerCase().includes(\"backward\") &&\n      !enhanced.toLowerCase().includes(\"breaking\")\n    ) {\n      commonConstraints.push(\"No breaking changes to existing functionality\");\n    }\n\n    if (!enhanced.toLowerCase().includes(\"performance\")) {\n      commonConstraints.push(\"Consider performance implications\");\n    }\n\n    if (commonConstraints.length > 0) {\n      enhanced += (enhanced ? \". \" : \"\") + commonConstraints.join(\". \");\n    }\n\n    return enhanced;\n  }\n\n  enhanceExpectedOutput(expectedOutput) {\n    if (!expectedOutput)\n      return \"Complete solution with code examples and implementation steps\";\n\n    let enhanced = expectedOutput;\n\n    // Make output expectations more specific\n    if (enhanced.length < 30) {\n      enhanced +=\n        \". Include: code examples, step-by-step instructions, and explanation of approach\";\n    }\n\n    // Add testing/validation suggestions\n    if (\n      !enhanced.toLowerCase().includes(\"test\") &&\n      !enhanced.toLowerCase().includes(\"verify\")\n    ) {\n      enhanced += \". Suggest how to test/verify the solution\";\n    }\n\n    // Add documentation hints for complex tasks\n    if (\n      enhanced.toLowerCase().includes(\"architecture\") ||\n      enhanced.toLowerCase().includes(\"refactor\")\n    ) {\n      enhanced += \". Include documentation for future maintenance\";\n    }\n\n    return enhanced;\n  }\n\n  getWorkspaceTypeHint() {\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n    if (!workspaceFolder) return null;\n\n    const basePath = workspaceFolder.uri.fsPath;\n    if (fs.existsSync(path.join(basePath, \"version.php\"))) return \"Moodle\";\n    if (fs.existsSync(path.join(basePath, \"package.json\")))\n      return \"React/Node.js\";\n    return null;\n  }\n\n  showPromptHistory() {\n    const panel = vscode.window.createWebviewPanel(\n      \"promptHistory\",\n      \"Prompt History & Analytics\",\n      vscode.ViewColumn.One,\n      { enableScripts: true }\n    );\n\n    panel.webview.html = this.getHistoryHTML();\n\n    panel.webview.onDidReceiveMessage((message) => {\n      switch (message.command) {\n        case \"ratePrompt\":\n          this.ratePrompt(message.promptId, message.rating);\n          break;\n        case \"deletePrompt\":\n          this.deletePrompt(message.promptId);\n          panel.webview.html = this.getHistoryHTML();\n          break;\n      }\n    });\n  }\n\n  async showRatingInterface() {\n    if (this.promptHistory.length === 0) {\n      vscode.window.showWarningMessage(\"No prompts to rate\");\n      return;\n    }\n\n    const unratedPrompts = this.promptHistory.filter((p) => !p.rating);\n    if (unratedPrompts.length === 0) {\n      vscode.window.showInformationMessage(\"All prompts are already rated\");\n      return;\n    }\n\n    const latest = unratedPrompts[unratedPrompts.length - 1];\n    const shortGoal =\n      latest.goal.substring(0, 50) + (latest.goal.length > 50 ? \"...\" : \"\");\n\n    const efficiency = await vscode.window.showInputBox({\n      prompt: `Rate Efficiency (1-5) for: \"${shortGoal}\"`,\n      validateInput: (value) => {\n        const num = parseInt(value);\n        return num >= 1 && num <= 5 ? null : \"Please enter 1-5\";\n      },\n    });\n\n    if (!efficiency) return;\n\n    const accuracy = await vscode.window.showInputBox({\n      prompt: \"Rate Accuracy (1-5)\",\n      validateInput: (value) => {\n        const num = parseInt(value);\n        return num >= 1 && num <= 5 ? null : \"Please enter 1-5\";\n      },\n    });\n\n    if (!accuracy) return;\n\n    const satisfaction = await vscode.window.showInputBox({\n      prompt: \"Rate Satisfaction (1-5)\",\n      validateInput: (value) => {\n        const num = parseInt(value);\n        return num >= 1 && num <= 5 ? null : \"Please enter 1-5\";\n      },\n    });\n\n    if (!satisfaction) return;\n\n    const notes = await vscode.window.showInputBox({\n      prompt: \"Additional notes (optional)\",\n      placeHolder: \"What worked well or could be improved?\",\n    });\n\n    this.ratePrompt(latest.id, {\n      efficiency: parseInt(efficiency),\n      accuracy: parseInt(accuracy),\n      satisfaction: parseInt(satisfaction),\n      notes: notes || \"\",\n    });\n  }\n\n  ratePrompt(promptId, rating) {\n    const prompt = this.promptHistory.find((p) => p.id === promptId);\n    if (prompt) {\n      prompt.rating = rating;\n      prompt.notes = rating.notes;\n      this.saveHistory();\n      vscode.window.showInformationMessage(\"Prompt rating saved!\");\n    }\n  }\n\n  deletePrompt(promptId) {\n    this.promptHistory = this.promptHistory.filter((p) => p.id !== promptId);\n    this.saveHistory();\n  }\n\n  showOptimizationSuggestions() {\n    const analytics = this.getAnalytics();\n    const suggestions = this.generateOptimizationSuggestions(analytics);\n\n    vscode.window.showInformationMessage(suggestions, { modal: true });\n  }\n\n  getAnalytics() {\n    const rated = this.promptHistory.filter((p) => p.rating);\n\n    return {\n      totalPrompts: this.promptHistory.length,\n      ratedPrompts: rated.length,\n      avgEfficiency: this.calculateAverage(rated, \"efficiency\"),\n      avgAccuracy: this.calculateAverage(rated, \"accuracy\"),\n      avgSatisfaction: this.calculateAverage(rated, \"satisfaction\"),\n      modelUsage: this.getModelUsageStats(),\n      topPerformingPrompts: rated\n        .sort(\n          (a, b) =>\n            (b.rating.efficiency + b.rating.accuracy + b.rating.satisfaction) /\n              3 -\n            (a.rating.efficiency + a.rating.accuracy + a.rating.satisfaction) /\n              3\n        )\n        .slice(0, 5),\n    };\n  }\n\n  calculateAverage(prompts, field) {\n    if (prompts.length === 0) return 0;\n    return (\n      prompts.reduce((sum, p) => sum + (p.rating[field] || 0), 0) /\n      prompts.length\n    );\n  }\n\n  getModelUsageStats() {\n    const usage = {};\n    this.promptHistory.forEach((p) => {\n      usage[p.modelSuggestion] = (usage[p.modelSuggestion] || 0) + 1;\n    });\n    return usage;\n  }\n\n  generateOptimizationSuggestions(analytics) {\n    let suggestions = \"Optimization Suggestions:\\n\\n\";\n\n    if (analytics.avgEfficiency < 3) {\n      suggestions += \"• Consider using more specific context and constraints\\n\";\n    }\n\n    if (analytics.avgAccuracy < 3) {\n      suggestions += \"• Include more detailed current state information\\n\";\n    }\n\n    if (analytics.avgSatisfaction < 3) {\n      suggestions += \"• Be more explicit about expected output format\\n\";\n    }\n\n    if (analytics.ratedPrompts < analytics.totalPrompts * 0.5) {\n      suggestions +=\n        \"• Rate more prompts to get better optimization insights\\n\";\n    }\n\n    return suggestions;\n  }\n\n  loadHistory() {\n    try {\n      const historyPath = path.join(\n        this.context.globalStorageUri.fsPath,\n        \"prompt-history.json\"\n      );\n      if (fs.existsSync(historyPath)) {\n        this.promptHistory = JSON.parse(fs.readFileSync(historyPath, \"utf8\"));\n      }\n    } catch (error) {\n      console.error(\"Failed to load prompt history:\", error);\n    }\n  }\n\n  saveHistory() {\n    try {\n      const historyPath = path.join(\n        this.context.globalStorageUri.fsPath,\n        \"prompt-history.json\"\n      );\n      fs.mkdirSync(path.dirname(historyPath), { recursive: true });\n      fs.writeFileSync(\n        historyPath,\n        JSON.stringify(this.promptHistory, null, 2)\n      );\n    } catch (error) {\n      console.error(\"Failed to save prompt history:\", error);\n    }\n  }\n\n  getPromptCreatorHTML() {\n    return `<!DOCTYPE html>\n        <html>\n        <head>\n            <style>\n                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; padding: 20px; background: var(--vscode-editor-background); color: var(--vscode-editor-foreground); }\n                .form-group { margin-bottom: 15px; }\n                label { display: block; margin-bottom: 5px; font-weight: bold; color: var(--vscode-editor-foreground); }\n                input, textarea, select { \n                    width: 100%; \n                    padding: 8px; \n                    border: 1px solid var(--vscode-input-border); \n                    border-radius: 4px; \n                    background: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    font-family: inherit;\n                }\n                textarea { min-height: 80px; resize: vertical; }\n                button { \n                    background: var(--vscode-button-background); \n                    color: var(--vscode-button-foreground); \n                    padding: 10px 20px; \n                    border: none; \n                    border-radius: 4px; \n                    cursor: pointer; \n                    font-family: inherit;\n                }\n                button:hover { background: var(--vscode-button-hoverBackground); }\n                .context-info { \n                    background: var(--vscode-textBlockQuote-background); \n                    border: 1px solid var(--vscode-textBlockQuote-border);\n                    padding: 10px; \n                    border-radius: 4px; \n                    margin-bottom: 15px;\n                    font-size: 0.9em;\n                    min-height: 20px;\n                }\n                .context-info.loading { \n                    opacity: 0.7; \n                    font-style: italic; \n                }\n                .model-suggestion { \n                    background: var(--vscode-editorInfo-background); \n                    border: 1px solid var(--vscode-editorInfo-border);\n                    padding: 10px; \n                    border-radius: 4px; \n                    margin-top: 10px; \n                }\n                h2 { color: var(--vscode-editor-foreground); margin-top: 0; }\n            </style>\n        </head>\n        <body>\n            <h2>Create Structured Prompt</h2>\n            <div class=\"context-info loading\" id=\"contextInfo\">Loading project context...</div>\n            \n            <form id=\"promptForm\">\n                <div class=\"form-group\">\n                    <label for=\"context\">Context:</label>\n                    <textarea id=\"context\" placeholder=\"Brief project context, current working area, relevant technologies\"></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"goal\">Goal:</label>\n                    <textarea id=\"goal\" placeholder=\"What you want to achieve - be specific\"></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"currentState\">Current State:</label>\n                    <textarea id=\"currentState\" placeholder=\"Relevant code/files, error messages, current behavior\"></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"constraints\">Constraints:</label>\n                    <textarea id=\"constraints\" placeholder=\"Requirements, limitations, standards to follow\"></textarea>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"expectedOutput\">Expected Output:</label>\n                    <textarea id=\"expectedOutput\" placeholder=\"Specific deliverable format, success criteria\"></textarea>\n                </div>\n                \n                <button type=\"submit\">Create Prompt</button>\n            </form>\n            \n            <div class=\"model-suggestion\" id=\"modelSuggestion\" style=\"display: none;\"></div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                // Load context on page load\n                window.addEventListener('load', () => {\n                    vscode.postMessage({ command: 'getContext' });\n                });\n                \n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    if (message.command === 'contextLoaded') {\n                        displayContext(message.data);\n                    }\n                });\n                \n                function displayContext(context) {\n                    const info = document.getElementById('contextInfo');\n                    info.classList.remove('loading');\n                    \n                    if (!context.projectName) {\n                        info.innerHTML = '<strong>No workspace detected</strong> - Open a project folder for enhanced context';\n                        return;\n                    }\n                    \n                    let html = '<strong>📁 Project Context:</strong><br>';\n                    html += \\`<strong>Project:</strong> \\${context.projectName}<br>\\`;\n                    html += \\`<strong>Branch:</strong> \\${context.gitBranch}<br>\\`;\n                    html += \\`<strong>Type:</strong> \\${getProjectType(context)}<br>\\`;\n                    \n                    if (context.openFiles && context.openFiles.length > 0) {\n                        const fileList = context.openFiles.slice(0, 3).map(f => f.fileName).join(', ');\n                        const remaining = context.openFiles.length > 3 ? \\` (+\\${context.openFiles.length - 3} more)\\` : '';\n                        html += \\`<strong>Open Files:</strong> \\${fileList}\\${remaining}\\`;\n                    } else {\n                        html += '<strong>Open Files:</strong> None';\n                    }\n                    \n                    info.innerHTML = html;\n                }\n                \n                function getProjectType(context) {\n                    if (context.hasMoodleConfig) return '🎓 Moodle Plugin';\n                    if (context.hasPackageJson) return '⚛️ Node.js/React';\n                    if (context.hasClaudeConfig) return '🤖 AI-Enhanced Project';\n                    return '📂 General Project';\n                }\n                \n                document.getElementById('promptForm').addEventListener('submit', (e) => {\n                    e.preventDefault();\n                    \n                    const data = {\n                        context: document.getElementById('context').value,\n                        goal: document.getElementById('goal').value,\n                        currentState: document.getElementById('currentState').value,\n                        constraints: document.getElementById('constraints').value,\n                        expectedOutput: document.getElementById('expectedOutput').value\n                    };\n                    \n                    vscode.postMessage({ command: 'createPrompt', data });\n                });\n            </script>\n        </body>\n        </html>`;\n  }\n\n  getHistoryHTML() {\n    const analytics = this.getAnalytics();\n\n    return `<!DOCTYPE html>\n        <html>\n        <head>\n            <style>\n                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; padding: 20px; }\n                .analytics { background: #f5f5f5; padding: 15px; border-radius: 4px; margin-bottom: 20px; }\n                .prompt-item { border: 1px solid #ddd; border-radius: 4px; padding: 15px; margin-bottom: 10px; }\n                .prompt-header { font-weight: bold; margin-bottom: 10px; }\n                .rating { margin-top: 10px; }\n                .rating button { margin-right: 5px; padding: 5px 10px; }\n                .rating.rated { background: #e8f4fd; }\n                button { background: #007ACC; color: white; padding: 5px 10px; border: none; border-radius: 3px; cursor: pointer; }\n                button.delete { background: #d32f2f; }\n                .model-tag { background: #007ACC; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8em; }\n            </style>\n        </head>\n        <body>\n            <h2>Prompt History & Analytics</h2>\n            \n            <div class=\"analytics\">\n                <h3>Analytics</h3>\n                <p><strong>Total Prompts:</strong> ${analytics.totalPrompts}</p>\n                <p><strong>Rated:</strong> ${analytics.ratedPrompts}/${\n      analytics.totalPrompts\n    }</p>\n                <p><strong>Avg Efficiency:</strong> ${analytics.avgEfficiency.toFixed(\n                  1\n                )}/5</p>\n                <p><strong>Avg Accuracy:</strong> ${analytics.avgAccuracy.toFixed(\n                  1\n                )}/5</p>\n                <p><strong>Avg Satisfaction:</strong> ${analytics.avgSatisfaction.toFixed(\n                  1\n                )}/5</p>\n            </div>\n            \n            <div class=\"prompts\">\n                ${this.promptHistory\n                  .map(\n                    (prompt) => `\n                    <div class=\"prompt-item\">\n                        <div class=\"prompt-header\">\n                            ${new Date(prompt.timestamp).toLocaleString()}\n                            <span class=\"model-tag\">${\n                              prompt.modelSuggestion\n                            }</span>\n                        </div>\n                        <p><strong>Goal:</strong> ${prompt.goal}</p>\n                        <p><strong>Context:</strong> ${prompt.context}</p>\n                        \n                        <div class=\"rating ${prompt.rating ? \"rated\" : \"\"}\">\n                            ${\n                              prompt.rating\n                                ? `<p>Efficiency: ${prompt.rating.efficiency}/5, Accuracy: ${prompt.rating.accuracy}/5, Satisfaction: ${prompt.rating.satisfaction}/5</p>`\n                                : `<button onclick=\"ratePrompt('${prompt.id}')\">Rate Prompt</button>`\n                            }\n                            <button class=\"delete\" onclick=\"deletePrompt('${\n                              prompt.id\n                            }')\">Delete</button>\n                        </div>\n                    </div>\n                `\n                  )\n                  .join(\"\")}\n            </div>\n            \n            <script>\n                const vscode = acquireVsCodeApi();\n                \n                function ratePrompt(promptId) {\n                    const efficiency = prompt('Rate Efficiency (1-5):');\n                    const accuracy = prompt('Rate Accuracy (1-5):');\n                    const satisfaction = prompt('Rate Satisfaction (1-5):');\n                    const notes = prompt('Additional notes (optional):') || '';\n                    \n                    if (efficiency && accuracy && satisfaction) {\n                        vscode.postMessage({\n                            command: 'ratePrompt',\n                            promptId,\n                            rating: {\n                                efficiency: parseInt(efficiency),\n                                accuracy: parseInt(accuracy),\n                                satisfaction: parseInt(satisfaction),\n                                notes\n                            }\n                        });\n                        location.reload();\n                    }\n                }\n                \n                function deletePrompt(promptId) {\n                    if (confirm('Delete this prompt?')) {\n                        vscode.postMessage({ command: 'deletePrompt', promptId });\n                    }\n                }\n            </script>\n        </body>\n        </html>`;\n  }\n}\n\nfunction activate(context) {\n  new PromptManager(context);\n}\n\nfunction deactivate() {}\n\nmodule.exports = { activate, deactivate };","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(12);\n"],"names":["vscode","fs","path","PromptManager","constructor","context","this","promptHistory","loadHistory","registerCommands","createPrompt","commands","registerCommand","showPromptCreator","viewHistory","showPromptHistory","ratePrompt","showRatingInterface","optimizePrompt","showOptimizationSuggestions","subscriptions","push","panel","window","createWebviewPanel","ViewColumn","One","enableScripts","webview","html","getPromptCreatorHTML","onDidReceiveMessage","async","message","command","createStructuredPrompt","data","getProjectContext","postMessage","workspaceFolder","workspace","workspaceFolders","projectName","basename","uri","fsPath","hasPackageJson","existsSync","join","hasMoodleConfig","hasClaudeConfig","hasCopilotConfig","gitBranch","getCurrentGitBranch","openFiles","textDocuments","map","doc","fileName","language","languageId","exec","Promise","resolve","cwd","error","stdout","trim","timestamp","Date","toISOString","prompt","id","now","toString","goal","currentState","constraints","expectedOutput","modelSuggestion","suggestModel","fullPrompt","formatPrompt","projectPath","rating","notes","saveHistory","env","clipboard","writeText","showInformationMessage","then","selection","toLowerCase","includes","optimized","optimizePromptContent","enhanceContext","enhanceGoal","enhanceCurrentState","enhanceConstraints","enhanceExpectedOutput","enhanced","workspaceContext","getWorkspaceTypeHint","length","commonConstraints","projectType","basePath","getHistoryHTML","promptId","deletePrompt","showWarningMessage","unratedPrompts","filter","p","latest","shortGoal","substring","efficiency","showInputBox","validateInput","value","num","parseInt","accuracy","satisfaction","placeHolder","find","analytics","getAnalytics","suggestions","generateOptimizationSuggestions","modal","rated","totalPrompts","ratedPrompts","avgEfficiency","calculateAverage","avgAccuracy","avgSatisfaction","modelUsage","getModelUsageStats","topPerformingPrompts","sort","a","b","slice","prompts","field","reduce","sum","usage","forEach","historyPath","globalStorageUri","JSON","parse","readFileSync","console","mkdirSync","dirname","recursive","writeFileSync","stringify","toFixed","toLocaleString","module","exports","activate","deactivate","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}